{"version":3,"sources":["logo.svg","components/DayWeather.js","assets/background.jpg","pages/Home.js","pages/DayDetails.js","App.js","reportWebVitals.js","index.js"],"names":["withRouter","props","useHistory","redirectData","pathname","day","state","data","JSON","stringify","capitalizeFirstLetter","string","charAt","toUpperCase","slice","Row","style","padding","margin","Col","xs","sm","md","lg","xl","className","city","details","fontStyle","color","textDecoration","to","date","fontWeight","fontSize","marginLeft","time","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","location","useLocation","useState","setCity","country","setCountry","weatherList","setWeatherList","weatherError","setWeatherError","loading","setLoading","spinnerColor","weatherIcons","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","weekDays","override","css","useEffect","redirected","weather_data","parse","getWeather","init","req_city","req_country","d_city","d_country","axios","get","API_DATA_KEY","then","resp","res_list","list","weather_data_list","map","item","curr_date_data","Date","res_date_data","dt_txt","curr_date","getDate","curr_month","getMonth","curr_year","getFullYear","curr_time","getHours","res_date","res_month","res_year","res_time","req_curr_date","tomorrow_curr_date","req_res_date","reqd_display_day","getDay","disp_time","getMinutes","getSeconds","icon_data","getWeatherIconData","weather","id","temp","celsius","calCelsius","main","icon","push","catch","err","setTimeout","console","log","icons","rangeId","Math","floor","height","backgroundImage","bgImage","backgroundRepeat","backgroundSize","offset","span","InputGroup","Form","Control","placeholder","value","onChange","e","target","Button","float","disabled","onClick","variant","marginTop","textAlign","size","index","paddingTop","history","currentDate","setCurrentDate","curr_country","curr_city","page","redirectPage","App","exact","path","component","Home","DayDetails","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09488c11.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from \"react\";\nimport { withRouter, useHistory, Link } from \"react-router-dom\";\nimport '../index.css'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport Form from \"react-bootstrap/Form\";\nimport Container from 'react-bootstrap/Container'\n\nconst DayWeather = (props) => {\n\n    const history = useHistory();\n\n    const redirectData = {\n        pathname: '/'+props.day,\n        state: { data: JSON.stringify(props) }\n    }\n    \n    const capitalizeFirstLetter = (string) => {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    const minmaxTemp = (min, max) => {\n        if (min && max) {\n            return (\n                <h3>\n                    <span className=\"px-4\">{min}&deg;</span>\n                    <span className=\"px-4\">{max}&deg;</span>\n                </h3>\n            )\n        }\n    }\n\n    return (\n        <Row style={{ padding: '0px', margin: '0px' }}>\n            <Col xs={12} sm={12} md={12} lg={12} xl={12}>\n                <div className=\"container\">\n                    <div className=\"cards pt-3\">\n                        <h3>{capitalizeFirstLetter(props.city)}</h3>\n                        {props.details?\n                        <p style={{ fontStyle: 'italic', color: '#0A73F0'}}>\n                           {props.day} \n                        </p>:\n                        <Link style={{ textDecoration: 'none' }} to={redirectData}>{props.day}</Link>}\n                        {props.date?<span style={{ fontStyle: 'italic', fontWeight: 'bold', fontSize: '14px', marginLeft: '5px' }}>({props.date} {props.time})</span>:''}\n                        <h5 className={props.details?\"py-3\":\"py-4\"}>\n                            <i className={`wi ${props.weatherIcon} display-1`}></i>\n                        </h5>\n                        {props.temp_celsius ?\n                            (<h1>{props.temp_celsius}&deg;</h1>) : null}\n                        {minmaxTemp(props.temp_min, props.temp_max)}\n                        <h4 className=\"py-1\"> {capitalizeFirstLetter(props.description)} </h4>\n                    </div>\n                </div>\n            </Col>\n        </Row>\n    );\n    }\n\nexport default withRouter(DayWeather);","export default __webpack_public_path__ + \"static/media/background.2e7b9cb7.jpg\";","import React, { useState, useEffect } from \"react\";\nimport { withRouter, useHistory, useLocation } from \"react-router-dom\";\nimport '../index.css'\nimport axios from 'axios'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Form from \"react-bootstrap/Form\";\nimport DayWeather from '../components/DayWeather'\nimport { css } from \"@emotion/react\";\nimport ClipLoader from \"react-spinners/ClipLoader\"\nimport bgImage from '../assets/background.jpg'\nimport { API_DATA_KEY } from '../constants'\n\nconst DayDetails = (props) => {\n\n    const history = useHistory();\n    const location = useLocation();\n\n    const [city, setCity] = useState('')\n    const [country, setCountry] = useState('')\n    const [weatherList, setWeatherList] = useState([]);\n    const [weatherError, setWeatherError] = useState(false);\n    let [loading, setLoading] = useState(false);\n    let [spinnerColor, setSpinnerColor] = useState(\"#FFD678\");\n\n    const weatherIcons = {\n        Thunderstorm: \"wi-thunderstorm\",\n        Drizzle: \"wi-sleet\",\n        Rain: \"wi-storm-showers\",\n        Snow: \"wi-snow\",\n        Atmosphere: \"wi-fog\",\n        Clear: \"wi-day-sunny\",\n        Clouds: \"wi-day-fog\",\n    };\n    const weekDays = {\n        1: 'Monday',\n        2: 'Tuesday',\n        3: 'Wednesday',\n        4: 'Thursday',\n        5: 'Friday',\n        6: 'Saturday',\n        0: 'Sunday'\n    }\n\n    const override = css`\n        justify-content: center; \n        align-items: center; \n        padding-top:1px;\n        margin-top: 18%;\n    `;\n\n    const API_KEY = API_DATA_KEY\n\n    useEffect(() => {\n        if (location.redirected) {\n            if(location.state){\n                let weather_data = JSON.parse(location.state.data);\n                if(weather_data.city && weather_data.country){\n                    setCity(weather_data.city);\n                    setCountry(weather_data.country);\n                    getWeather(true, weather_data.city, weather_data.country);\n                }\n            }\n        }\n    }, [])\n\n\n    const clear = () => {\n        setCountry('');\n        setCity('');\n        setWeatherList([]);\n    }\n\n    const getWeather = (init, req_city, req_country) => {\n        let d_city = init?req_city:city;\n        let d_country = init?req_country:country\n        setLoading(true);\n        setWeatherList([]);\n        axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${d_city},${d_country}&appid=${API_KEY}`).then(resp => {\n            let res_list = resp.data.list;\n            let weather_data_list = [];\n            setLoading(false);\n            setWeatherError(false);\n            res_list.map(item => {\n                let curr_date_data = new Date();\n                let res_date_data = new Date(item.dt_txt);\n                let curr_date = curr_date_data.getDate();\n                let curr_month = curr_date_data.getMonth()+1;\n                let curr_year = curr_date_data.getFullYear();\n                let curr_time = curr_date_data.getHours();\n                let res_date = res_date_data.getDate(); \n                let res_month = res_date_data.getMonth()+1;\n                let res_year = res_date_data.getFullYear();\n                let res_time = res_date_data.getHours();\n                let req_curr_date = curr_date+'-'+curr_month+'-'+curr_year;\n                let tomorrow_curr_date = (curr_date+1)+'-'+curr_month+'-'+curr_year;\n                let req_res_date = res_date+'-'+res_month+'-'+res_year;\n                let reqd_display_day = weekDays[res_date_data.getDay()];\n                let disp_time = curr_time + ':' + curr_date_data.getMinutes() + ':' + curr_date_data.getSeconds();\n                if(req_res_date === req_curr_date){\n                    reqd_display_day = 'Today';\n                }else if(req_res_date === tomorrow_curr_date){\n                    reqd_display_day = 'Tomorrow';\n                }\n                if(curr_time >= res_time && curr_time < res_time+3){\n                    let icon_data = getWeatherIconData(weatherIcons, item.weather[0].id);\n                    let temp =  {\n                        city: d_city,\n                        country: d_country,\n                        time: disp_time,\n                        day: reqd_display_day,\n                        date: req_res_date,\n                        celsius: calCelsius(item.main.temp),\n                        temp_min: calCelsius(item.main.temp_min),\n                        temp_max: calCelsius(item.main.temp_max),\n                        description: item.weather[0].description,\n                        icon: icon_data\n                    }\n                    weather_data_list.push(temp)\n                }\n            })\n            setWeatherList(weather_data_list);\n        }).catch(err => {\n            setLoading(false);\n            setWeatherError(true);\n            setTimeout(() => {\n                setWeatherError(false);\n            }, 8000)\n            console.log(err);\n            setWeatherList([])\n        })\n    }\n\n    const getWeatherIconData = (icons, rangeId) => {\n        switch (true) {\n          case rangeId >= 200 && rangeId < 232:\n            return icons.Thunderstorm;\n          case rangeId >= 300 && rangeId <= 321:\n            return icons.Drizzle;\n          case rangeId >= 500 && rangeId <= 521:\n            return icons.Rain;\n          case rangeId >= 600 && rangeId <= 622:\n            return icons.Snow;\n          case rangeId >= 701 && rangeId <= 781:\n            return icons.Atmosphere;\n          case rangeId === 800:\n            return icons.Clear;\n          case rangeId >= 801 && rangeId <= 804:\n            return icons.Clouds;\n          default:\n            return icons.Clouds;\n        }\n    }\n\n    const calCelsius = (temp) => {\n        let cel = Math.floor(temp - 273.15)\n        return cel;\n    }\n      \n    return (\n        <Row style={{ height: '100vh', backgroundImage: \"url(\" + bgImage + \")\",backgroundRepeat: 'no-repeat', backgroundSize: 'cover', padding: '20px', margin: '0px'}}>\n            <Col xs={12} sm={12} md={12} lg={12} xl={12}>\n                <Row style={{ padding: '0px', margin: '0px' }}>\n                    <Col xs={{ offset: 1, span: 4}} sm={{ offset: 1, span: 4}} md={{ offset: 1, span: 4}} lg={{ offset: 1, span: 4}} xl={{ offset: 1, span: 4}}>\n                    <InputGroup className=\"mb-3\">\n                        <Form.Control\n                            placeholder=\"City\"\n                            aria-label=\"city\"\n                            aria-describedby=\"city\"\n                            value={city}\n                            onChange={(e) => setCity(e.target.value)}\n                        />\n                    </InputGroup>\n                    </Col>\n                    <Col xs={3} sm={3} md={3} lg={3} xl={3}>\n                    <InputGroup className=\"mb-3\">\n                        <Form.Control\n                            placeholder=\"Country\"\n                            aria-label=\"country\"\n                            aria-describedby=\"country\"\n                            value={country}\n                            onChange={(e) => setCountry(e.target.value)}\n                        />\n                    </InputGroup>\n                    </Col>\n                    <Col xs={3} sm={3} md={3} lg={3} xl={3}>\n                        <Button style={{ float: 'left' }} disabled={!city || !country} onClick={() => getWeather()} variant=\"warning\">Get Weather</Button>\n                        <Button style={{ float: 'left', marginLeft: '10px' }} disabled={!city && !country} onClick={() => clear()} variant=\"danger\">Clear</Button>\n                    </Col>\n                </Row>\n                {weatherError?<Row style={{ padding: '0px', margin: '0px' }}>\n                    <Col xs={12} sm={12} md={12} lg={12} xl={12}>\n                        <p style={{marginTop: '5px', color: 'red', textAlign: 'center'}}>Some Error Occured.</p>\n                    </Col>\n                </Row>:''}\n                <ClipLoader color={spinnerColor} loading={loading} css={override} size={150} />\n                <Row style={{ padding: '0px', margin: '0px' }}>\n                        {weatherList?\n                            weatherList.map((item, index) => {\n                                return (\n                                <Col style={{ paddingTop: index>2?'20px': '0px'}} key={\"weather\"+index} xs={4} sm={4} md={4} lg={4} xl={4}>\n                                    <DayWeather\n                                        city={item.city}\n                                        country={item.country}\n                                        day={item.day}\n                                        date={item.date}\n                                        time={item.time}\n                                        temp_celsius={item.celsius}\n                                        temp_max={item.temp_max}\n                                        temp_min={item.temp_min}\n                                        description={item.description}\n                                        weatherIcon={item.icon}\n                                    />\n                                </Col>\n                            )})\n                        :''}\n                </Row>\n            </Col>    \n        </Row>\n    );\n    }\n\nexport default withRouter(DayDetails);","import React, { useState, useEffect } from \"react\";\nimport { withRouter, useHistory, useLocation } from \"react-router-dom\";\nimport '../index.css'\nimport axios from 'axios'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport DayWeather from '../components/DayWeather'\nimport bgImage from '../assets/background.jpg'\nimport { API_DATA_KEY } from '../constants'\n\nconst DayDetails = (props) => {\n\n    const history = useHistory();\n    const location = useLocation();\n\n    const [city, setCity] = useState('')\n    const [country, setCountry] = useState('')\n    const [weatherList, setWeatherList] = useState([]);\n    const [weatherError, setWeatherError] = useState(false);\n    const [currentDate, setCurrentDate] = useState('');\n\n    const weatherIcons = {\n        Thunderstorm: \"wi-thunderstorm\",\n        Drizzle: \"wi-sleet\",\n        Rain: \"wi-storm-showers\",\n        Snow: \"wi-snow\",\n        Atmosphere: \"wi-fog\",\n        Clear: \"wi-day-sunny\",\n        Clouds: \"wi-day-fog\",\n    };\n    const weekDays = {\n        1: 'Monday',\n        2: 'Tuesday',\n        3: 'Wednesday',\n        4: 'Thursday',\n        5: 'Friday',\n        6: 'Saturday',\n        0: 'Sunday'\n    }\n\n    const API_KEY = API_DATA_KEY\n    \n    useEffect(() => {\n        if(location.state){\n            let weather_data = JSON.parse(location.state.data);\n            if(weather_data.city && weather_data.country && weather_data.date){\n                setCity(weather_data.city);\n                setCountry(weather_data.country);\n                setCurrentDate(weather_data.date);\n                getWeather(weather_data.country, weather_data.city, weather_data.date)\n            }\n        }\n    }, [])\n\n    const redirectPage = (page) => {\n        let temp = {\n            pathname: page,\n            redirected: true,\n            state: { data: JSON.stringify({'city': city, 'country': country}) }\n        }\n        history.push(temp);\n    }\n\n    const getWeather = (curr_country, curr_city, req_curr_date) => {\n        axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${curr_city},${curr_country}&appid=${API_KEY}`).then(resp => {\n            let res_list = resp.data.list;\n            let weather_data_list = [];\n            setWeatherError(false);\n            res_list.map(item => {\n                let curr_date_data = new Date();\n                let res_date_data = new Date(item.dt_txt);\n                let curr_date = curr_date_data.getDate();\n                let curr_month = curr_date_data.getMonth()+1;\n                let curr_year = curr_date_data.getFullYear();\n                let curr_time = curr_date_data.getHours();\n                let res_date = res_date_data.getDate(); \n                let res_month = res_date_data.getMonth()+1;\n                let res_year = res_date_data.getFullYear();\n                let res_time = res_date_data.getHours();\n                let res_curr_date = curr_date+'-'+curr_month+'-'+curr_year;\n                let tomorrow_curr_date = (curr_date+1)+'-'+curr_month+'-'+curr_year;\n                let req_res_date = res_date+'-'+res_month+'-'+res_year;\n                let reqd_display_day = item.dt_txt;\n                if(req_res_date === req_curr_date){\n                    let icon_data = getWeatherIconData(weatherIcons, item.weather[0].id);\n                    let temp =  {\n                        city: curr_city,\n                        country: curr_country,\n                        time: res_time,\n                        day: reqd_display_day,\n                        date: req_res_date,\n                        celsius: calCelsius(item.main.temp),\n                        temp_min: calCelsius(item.main.temp_min),\n                        temp_max: calCelsius(item.main.temp_max),\n                        description: item.weather[0].description,\n                        icon: icon_data\n                    }\n                    weather_data_list.push(temp)\n                }\n            })\n            setWeatherList(weather_data_list);\n        }).catch(err => {\n            setWeatherError(true);\n            setTimeout(() => {\n                setWeatherError(false);\n            }, 8000)\n            console.log(err);\n            setWeatherList([])\n        })\n    }\n\n    const getWeatherIconData = (icons, rangeId) => {\n        switch (true) {\n          case rangeId >= 200 && rangeId < 232:\n            return icons.Thunderstorm;\n          case rangeId >= 300 && rangeId <= 321:\n            return icons.Drizzle;\n          case rangeId >= 500 && rangeId <= 521:\n            return icons.Rain;\n          case rangeId >= 600 && rangeId <= 622:\n            return icons.Snow;\n          case rangeId >= 701 && rangeId <= 781:\n            return icons.Atmosphere;\n          case rangeId === 800:\n            return icons.Clear;\n          case rangeId >= 801 && rangeId <= 804:\n            return icons.Clouds;\n          default:\n            return icons.Clouds;\n        }\n    }\n\n    const calCelsius = (temp) => {\n        let cel = Math.floor(temp - 273.15)\n        return cel;\n    }\n      \n    return (\n        <Row style={{ height: '100vh', backgroundImage: \"url(\" + bgImage + \")\",backgroundRepeat: 'no-repeat', backgroundSize: 'cover', padding: '20px', margin: '0px'}}>\n            <Col xs={12} sm={12} md={12} lg={12} xl={12}>\n                <Row>\n                    <Col xs={12} sm={12} md={12} lg={12} xl={12}>\n                        <Button style={{ float: 'left'}} size='sm' onClick={() => redirectPage('/')} variant=\"primary\">Back</Button>\n                    </Col>\n                </Row>\n                <Row style={{ margin: '0px', padding: '10px 0px'}}>\n                    <Col xs={12} sm={12} md={12} lg={12} xl={12}>\n                        <h1>{currentDate} <p style={{ fontSize: '18px', fontWeight: 'bold', fontStyle: 'italic'}}>(3-Hourly)</p></h1> \n                        <h3></h3>\n                    </Col>\n                </Row>\n                <Row style={{ padding: '0px', margin: '0px' }}>\n                    {weatherList?\n                        weatherList.map((item, index) => {\n                            return (\n                                <Col style={{ paddingTop: index>2?'20px': '0px'}} key={\"weather\"+index} xs={4} sm={4} md={4} lg={4} xl={4}>\n                                    <DayWeather\n                                        details={true}\n                                        city={item.city}\n                                        country={item.country}\n                                        day={item.day}\n                                        time={item.time}\n                                        temp_celsius={item.celsius}\n                                        temp_max={item.temp_max}\n                                        temp_min={item.temp_min}\n                                        description={item.description}\n                                        weatherIcon={item.icon}\n                                    />\n                                </Col>\n                        )})\n                    :''}\n            </Row>\n            </Col>\n        </Row>\n    );\n    }\n\nexport default withRouter(DayDetails);","import logo from './logo.svg';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport DayDetails from './pages/DayDetails';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Switch>\n          <Route exact path='/' component={Home} />\n          <Route exact path='/weather-app/' component={Home} />\n          <Route exact path='/:day' component={DayDetails} />\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom'\nimport './css/weather-icons.min.css'\nimport './css/weather-icons-wind.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n   <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}